#version 330 core
out vec4 colour;

in vec4 vertexColourOut;
in vec2 vertexTextureCoordOut;
in vec3 vertexNormalDir;
in vec3 vertCameraDir;
in vec3 lightDirection;
in float lightDistance;


uniform sampler2D baseTexture;

uniform vec4 diffuseLightColour;
uniform vec4 diffuseMaterialColour;
uniform vec4 specularMaterialColour;
uniform vec4 specularIntensity;

vec3 shine;

void main()
{

	vec3 foo = normalize(reflect(lightDirection, normalize(vertexNormalDir)));
	float shineness = dot(vertCameraDir, foo);
	float specularAngle = pow(clamp(shineness, 0, 1), 25.0f);
	vec4 specular = specularAngle* specularMaterialColour *specularIntensity;

	float cosTheta = dot(vertexNormalDir, lightDirection );
	cosTheta = clamp(cosTheta, 0,1);
    vec4 diffuse = cosTheta*texture2D(baseTexture,vertexTextureCoordOut)*diffuseLightColour*diffuseMaterialColour;

  //colour = fragmentColour;
  colour= diffuse + specular;

}