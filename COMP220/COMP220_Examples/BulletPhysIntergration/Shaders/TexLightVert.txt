#version 330 core
layout(location = 0) in vec3 vertexPos;
layout(location=1) in vec4 vertexColour;
layout(location=2) in vec2 vertexTextureCoord;
layout(location=3) in vec3 vertexNormal;


out vec4 vertexColourOut;
out vec2 vertexTextureCoordOut;
out vec3 vertexNormalDir;
out vec3 vertCameraDir;
out vec3 lightDirection;
out float lightDistance;

uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform vec3 lightLocation;
uniform vec3 cameraLocation;

void main()
{	
	lightDistance = 200/pow(length(lightLocation-vertexPos), 2);

	//Make surface pos and normals relative to the new  model matrix!!!!
	vec3 normal = normalize(transpose(inverse(mat3(modelMatrix))) * vertexNormal);
	vec3 surfacePos = vec3(modelMatrix * vec4(vertexPos, 1));

	vertexNormalDir = normal;
	vertexColourOut=vertexColour;
	vertexTextureCoordOut=vertexTextureCoord;

	mat4 MVPmatrix = projectionMatrix*viewMatrix*modelMatrix;
	gl_Position =MVPmatrix * vec4(vertexPos,1.0);

	vertCameraDir = normalize(cameraLocation - surfacePos);
	lightDirection = normalize(lightLocation - surfacePos);

}