#version 330 core
out vec4 colour;

in vec4 vertexColourOut;
in vec2 vertexTextureCoordOut;
in vec3 vertexNormalDir;
in vec3 vertCameraDir;
in vec3 lightDirection;


uniform sampler2D baseTexture;

uniform vec4 diffuseLightColour;
uniform float lightDistance;
uniform vec4 diffuseMaterialColour;


vec3 shine;


void main()
{
	vec3 foo = lightDirection + vertCameraDir;
	float shineness = dot(vertexNormalDir, foo);
	shineness = pow(clamp(shineness, 0, 1), 25.0f);
	vec4 specular = shineness* vec4(1.0f,1.0f,1.0f,1.0f);

	float cosTheta = dot(vertexNormalDir, lightDirection );
	cosTheta = clamp(cosTheta, 0,1);
    vec4 diffuse = cosTheta*texture2D(baseTexture,vertexTextureCoordOut);

  //colour = fragmentColour;
  colour= diffuse + specular;

}